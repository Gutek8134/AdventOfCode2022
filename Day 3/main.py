import string

PRIORITIES = string.ascii_letters


def main() -> None:
    prioritySum: int = 0
    badges: list[str] = []
    with open("input.txt") as f:
        group: list[set[str]] = []
        for rucksack in f.readlines():
            # Gets rid of whitespace
            rucksack = rucksack.strip()
            # Converts the line to two sets, both containing approx half of the rucksack
            compartment: tuple[set[str], set[str]] = set(
                rucksack[:len(rucksack)//2]), set(rucksack[len(rucksack)//2:])
            # Finds the element that is in both sets (so, their intersection) in PRIORITIES and adds one to the index, then adds to the sum
            prioritySum += PRIORITIES.find(
                compartment[0].intersection(compartment[1]).pop()) + 1

            # Adds the rucksack items to the group list
            group.append(set(rucksack))
            # Once it is a group of 3
            if len(group) == 3:
                # Adds the common item (generated by intersection) to the badges
                badges.append(group[0].intersection(
                    group[1]).intersection(group[2]).pop())
                # and resets the group
                group = []

    print(prioritySum)

    # To get sum of priorities of group items, map calls the find function, adds 1 to the index
    # and then sum sums them all
    print(sum(map(lambda x: PRIORITIES.find(x)+1, badges)))


if __name__ == "__main__":
    main()
